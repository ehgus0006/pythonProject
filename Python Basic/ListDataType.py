# 파이썬의 리스트 자료형은 C나 자바와 같은 프로그래밍 언어처럼 내부적으로 배열을 채택하고 있으며,
# append(), remove() 등의 메서드를 지원한다.


# 리스트 만들기
a = [1, 2, 3, 4, 5, 6, 7 ,8, 9]
print(a)

# 인덱스 4, 즉 다섯 번째 원소에 접근
print(a[4])

# 빈 리스트 선언 방법
a = list()
print(a)

# 빈 리스트 선언 방법2
a = []
print(a)

# ex) 코테 문제 크기가 N인 1차원 리스트를 초기화 해야 하는데
# 다음은 크기가 N이고, 모든 값이 0인 1차원 리스트를 초기화하는 소스코드다.

n = 10
a = [0] * n
print(a)

# 리스트의 인덱싱과 슬라이싱
a = [1, 2, 3, 4, 5, 6, 7 ,8, 9]

# 뒤에서 첫번째 원소 출력
print(a[-1])

# 뒤에서 세번째 원소 출력
print(a[-3])

# 네번째 원소 값 변경
a[3] = 7
print(a)

# 두번째 원소부터 네 번째 원소까지
print(a[1:4])

# 리스트 컴프리헨션
# 리스트 컴프리헨션은 리스트를 초기화하는 방법 중 하나이다.
# 소스코드가 짧고 간결해 진다.

# 0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i%2==1]
print(array)

# 1부터 9까지의 수의 제곱 값을 포함하는 리스트
array = [i*i for i in range(10)]
print(array)

# 리스트 컴프리헨션은 코딩 테스트에서 2차원 리스트를 초기화할 때 매우 효과적으로 사용될 수 있다.

# N X M 크기의 2차원 리스트 초기화
n = 3
m = 4
array = [[0] * m for _ in range(n)]
print(array)

# 언더바(_)는 반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때 언더바(_)를 자주 사용한다.

summary = 0
for i in range(10):
    summary += i
print(summary)

for _ in range(5):
    print("Hello World")

# 1부터 9까지의 자연수를 더할 때는 위쪽 예시처럼 작성하지만, 단순히 Hello World를 5번 출력할때는 언더바(_)를 이용하여 무시할 수 있다.

# N X M 크기의 2차원 리스트 초기화(잘못된 방법)
n = 3
m = 4
array = [[0] * m] * n
print(array)

array[1][1]=5
print(array)

# 실행 결과를 확인해보면 array[1][1]의 값을 5로 바꾸었을 뿐인데, 3개의 리스트에서 인덱스 1에 해당하는 원소들의 값이 모두 5로 바뀐것을 알 수 있다.
# 이는 내부적으로 포함된 3개의 리스트가 모두 동일한 객체에 대한 3개의 레퍼런스로 인식되기 때문이다.
# 따라서 특정의 크기를 가지는 2차원 리스트를 초기화할 때에는 리스트 컴프리헨션을 사용해야 한다.

# 리스트 관련 기타 메서드
a  = [1, 4, 3]
print("기본 리스트: ", a)

# 리스트에 원소 삽입
a.append(2)
print("삽입: ", a)

# 오름차순 정렬
a.sort()
print(a)

# 내림차순 정렬
a.sort(reverse=True)
print(a)

# 리스트 원소 뒤집기
a.reverse()
print(a)

# 특정 인덱스에 데이터 추가
a.insert(2, 3)
print(a)

# 특정 값인 데이터 개수 세기
print("값이 3인 데이터", a.count(3))

# 특정 값 데이터 삭제
a.remove(1)
print("값이 1인 데이터 삭제",a)

# insert() 함수를 남발하면 시간 초과로 테스트에 통과하지 못할 수 있다.
# 이유는 시간 복잡도가 O(N)

# 특정한 값을 모두 제거하려면 다른 프로그래밍 언어에서는 remove_all()과 같은 함수로 간단하게 특정한 값을 가지는 모든 원소를 제거할 수 있다.
# 하지만 파이썬은 이를 제공하지 않음으로 다음과 같은 방법을 사용할 수 있다.

a = [1, 2, 3, 4, 5, 5, 5]
remove_set = {3, 5}

# remove_set에 포함되지 않은 값만을 저장
result = [i for i in a if i not in remove_set]
print(result)